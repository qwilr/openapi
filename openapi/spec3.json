{
  "openapi": "3.0.2",
  "info": {
    "version": "1.0.0",
    "title": "API Reference",
    "termsOfService": "https://qwilr.com/terms/",
    "contact": {
      "email": "api@qwilr.com",
      "url": "http://qwilr.com"
    },
    "license": {
      "name": "Qwilr License",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://qwilr.com/wp-content/uploads/2019/10/qwilr-logo-dark.png"
    },
    "description": "## Introduction\n\nWelcome to the Qwilr Public API documentation. With our API you'll be\nable to generate Qwilr Pages programmatically. This means you can\ngenerate custom quotes, create pages when someone fills out a form,\nor anything else. The sky is the limit.\n\nOur API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer).\nAll calls made are live. If you need to test outside of your live account,\nget in touch with our team for options around that.\n\nIf you're looking for help with the Qwilr app you can find that in our\n[help documentation](https://help.qwilr.com/).\n\nIf you have any questions about our API, please get in touch at\n[help@qwilr.com](mailto:help@qwilr.com).\n"
  },
  "externalDocs": {
    "description": "Sign up for Qwilr",
    "url": "https://qwilr.com/signup/"
  },
  "tags": [
    {
      "name": "Pages",
      "description": "Page objects correspond to pages in the Qwilr UI, allowing for the\ncreation of a public-facing Qwilr Page. The Qwilr API allows you to\ncreate, delete and replace your Pages by sending through JSON objects.\n"
    },
    {
      "name": "Blocks",
      "description": "Block objects correspond to blocks in the Qwilr UI. Pages and templates are\ncomposed of a series of blocks. The Qwilr API allows you to get saved blocks\nfrom your account.\n"
    },
    {
      "name": "Subscriptions",
      "description": "Webhooks allow you to subscribe and unsubscribe from events on your Qwilr account.\n"
    }
  ],
  "servers": [
    {
      "url": "https://api.qwilr.com/v1",
      "description": "Production server (uses live data)"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/pages": {
      "post": {
        "summary": "Create a page",
        "description": "Creates a page from saved blocks or template.",
        "tags": [
          "Pages"
        ],
        "operationId": "createPage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Title of the page, visible as the browser title."
                  },
                  "published": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the page is publically available; `false` means the page will be in [Draft status](https://help.qwilr.com/article/578-dashboard-page-statuses). Default is `false`."
                  },
                  "substitutions": {
                    "$ref": "#/components/schemas/PageSubstitutions"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/Metadata"
                  },
                  "tags": {
                    "type": "array",
                    "description": "These tags to be applied to your page. Tags are case-sensitive.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ownerId": {
                    "description": "Id of the user that you want the created page belongs to. You don't need to set this field if you want the owner of the access key be the owner of the page.",
                    "$ref": "#/components/schemas/ObjectId"
                  }
                },
                "oneOf": [
                  {
                    "title": "Saved Blocks",
                    "properties": {
                      "blocks": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "$ref": "#/components/schemas/SavedBlockId"
                            },
                            "foldable": {
                              "type": "object",
                              "description": "Foldable settings for the block. Folding is only possible with non Quote block types. Don't set this field for your Quote block.",
                              "properties": {
                                "enabled": {
                                  "type": "boolean",
                                  "default": false,
                                  "description": "The block has the fold/unfold button shown if the property is `true`, otherwise the ability to fold/unfold is disabled. Default is `false`."
                                },
                                "isFolded": {
                                  "type": "boolean",
                                  "default": false,
                                  "description": "The block is folded by default if the property is `true`, otherwise it's expanded. Default is `false`."
                                },
                                "label": {
                                  "type": "string",
                                  "default": "Show / Hide",
                                  "description": "The label shown when folding is enabled. Default is `Show / Hide`."
                                }
                              },
                              "required": [
                                "enabled"
                              ]
                            },
                            "splashSettings": {
                              "$ref": "#/components/schemas/SplashSettings"
                            },
                            "acceptSettings": {
                              "$ref": "#/components/schemas/AcceptBlockSettings"
                            },
                            "quoteSettings": {
                              "$ref": "#/components/schemas/QuoteSettings"
                            },
                            "quoteSections": {
                              "type": "array",
                              "description": "An array of sections in a saved Quote block. Only relevant if you want to customise your quote block. Ignore this field for non Quote block types.",
                              "maxItems": 100,
                              "items": {
                                "$ref": "#/components/schemas/QuoteSection"
                              }
                            },
                            "substitutions": {
                              "$ref": "#/components/schemas/BlockSubstitutions"
                            }
                          },
                          "required": [
                            "id"
                          ],
                          "additionalProperties": false
                        }
                      }
                    },
                    "required": [
                      "blocks"
                    ]
                  },
                  {
                    "title": "Template",
                    "properties": {
                      "templateId": {
                        "$ref": "#/components/schemas/ObjectId"
                      },
                      "acceptSettings": {
                        "$ref": "#/components/schemas/AcceptTemplateSettings"
                      }
                    },
                    "required": [
                      "templateId"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/blocks/saved": {
      "get": {
        "summary": "Get saved blocks",
        "description": "Allows you to retrieve a list of saved blocks from your account, with block names. Useful in developer workflow for mapping block names to saved block IDs.",
        "tags": [
          "Blocks"
        ],
        "operationId": "getSavedBlocks",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SavedBlock"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/pages/{pageId}": {
      "get": {
        "summary": "Get a page",
        "description": "Returns a page",
        "tags": [
          "Pages"
        ],
        "operationId": "getPage",
        "parameters": [
          {
            "name": "pageId",
            "required": true,
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "style": "form",
            "explode": false,
            "allowReserved": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "metadata",
                  "acceptance",
                  "previewAcceptance"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "put": {
        "summary": "Update page",
        "description": "Allows you to update the `published` property.",
        "tags": [
          "Pages"
        ],
        "operationId": "updatePage",
        "parameters": [
          {
            "name": "pageId",
            "required": true,
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/ObjectId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "published": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The page has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "summary": "Get a list of all webhook subscriptions",
        "description": "Allows you to retrieve a list of all the webhook subscriptions that you have created using the create webhook subscription endpoint.",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "getSubscriptions",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "post": {
        "summary": "Create a webhook event subscription",
        "description": "Creates a new webhook subscription to an event type. New events will be sent to the defined `targetUrl`. You should store the `id` field returned in case you want to cancel the subscription later on.",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "subscribeToNotification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event": {
                    "$ref": "#/components/schemas/EventType"
                  },
                  "targetUrl": {
                    "type": "string"
                  }
                },
                "required": [
                  "event",
                  "targetUrl"
                ]
              }
            }
          }
        },
        "callbacks": {
          "pageAccepted": {
            "{$request.body#/targetUrl}": {
              "post": {
                "summary": "pageAccepted",
                "requestBody": {
                  "description": "Webhook callback that fires when a page is accepted.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "event": {
                            "type": "string",
                            "enum": [
                              "pageAccepted"
                            ]
                          },
                          "idempotencyKey": {
                            "type": "string",
                            "example": "6ee0f841f3cc8900090d82dc"
                          },
                          "page": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/ObjectId"
                              },
                              "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          }
                        },
                        "required": [
                          "event",
                          "page"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Return this if your server accepts the callback. This acknowledgement should be made before the timeout of 30s. If the timeout occurs, the callback will be retried, up to 5 times."
                  }
                }
              }
            }
          },
          "pagePreviewAccepted": {
            "{$request.body#/targetUrl}": {
              "post": {
                "summary": "pagePreviewAccepted",
                "requestBody": {
                  "description": "Webhook callback that fires when a page is \"accepted\" as part of [previewing the acceptance process](https://help.qwilr.com/article/175-getting-documents-accepted#process).",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "event": {
                            "type": "string",
                            "enum": [
                              "pagePreviewAccepted"
                            ]
                          },
                          "idempotencyKey": {
                            "type": "string",
                            "example": "61386c853b700e0006d54901"
                          },
                          "page": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/ObjectId"
                              },
                              "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          }
                        },
                        "required": [
                          "event",
                          "page"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Return this if your server accepts the callback. This acknowledgement should be made before the timeout of 30s. If the timeout occurs, the callback will be retried, up to 5 times."
                  }
                }
              }
            }
          },
          "pageFirstViewed": {
            "{$request.body#/targetUrl}": {
              "post": {
                "summary": "pageFirstViewed",
                "requestBody": {
                  "description": "Webhook callback that fires when a page is viewed for the first time. It is intended to capture public page viewers while excluding views by logged-in Qwilr users. We also provide an [IP filtering feature](https://help.qwilr.com/article/315-filtering-out-internal-views) to exclude other internal views, if required.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "event": {
                            "type": "string",
                            "enum": [
                              "pageFirstViewed"
                            ]
                          },
                          "idempotencyKey": {
                            "type": "string",
                            "example": "6ee0f841f3cc8900090d82dcqgco0OBdTtu3"
                          },
                          "page": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/ObjectId"
                              },
                              "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "viewedUrl": {
                            "type": "string",
                            "example": "https://pages.qwilr.com/My-Qwilr-Page-UeOsR7ATyqBo"
                          }
                        },
                        "required": [
                          "event",
                          "page",
                          "viewedUrl"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Return this if your server accepts the callback. This acknowledgement should be made before the timeout of 30s. If the timeout occurs, the callback will be retried, up to 5 times."
                  }
                }
              }
            }
          },
          "pageViewed": {
            "{$request.body#/targetUrl}": {
              "post": {
                "summary": "pageViewed",
                "requestBody": {
                  "description": "Webhook callback that fires when a page is viewed (regardless of whether it is the first view or a subsequent view). It is intended to capture public page viewers while excluding views by logged-in Qwilr users. We also provide an [IP filtering feature](https://help.qwilr.com/article/315-filtering-out-internal-views) to exclude other internal views, if required.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "event": {
                            "type": "string",
                            "enum": [
                              "pageViewed"
                            ]
                          },
                          "idempotencyKey": {
                            "type": "string",
                            "example": "6ee0f841f3cc8900090d82dcqgco0OBdTtu3"
                          },
                          "page": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "$ref": "#/components/schemas/ObjectId"
                              },
                              "metadata": {
                                "$ref": "#/components/schemas/Metadata"
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "viewedUrl": {
                            "type": "string",
                            "example": "https://pages.qwilr.com/My-Qwilr-Page-UeOsR7ATyqBo"
                          }
                        },
                        "required": [
                          "event",
                          "page",
                          "viewedUrl"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Return this if your server accepts the callback. This acknowledgement should be made before the timeout of 30s. If the timeout occurs, the callback will be retried, up to 5 times."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscribed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/webhooks/{subscriptionId}": {
      "delete": {
        "summary": "Cancel a webhook event subscription",
        "description": "Cancels a webhook event subscription using the `id` field that was returned when the webhook subscription was created.",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "unsubscribeToNotification",
        "parameters": [
          {
            "name": "subscriptionId",
            "description": "The id returned when your subscription was created",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Unsubscribed"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "All requests to API need to be authenticated with your account's access token. You can find\nyour access token in the [Qwilr API Settings](https://app.qwilr.com/#/settings/api):\n\nYour access token allows anyone to access your Qwilr Pages and account. Be sure to keep it\nsecret! Do not share your secret access tokens in any public spaces such as your source\nrepository, client-side code, and so forth.\n\n**When making a request:**\n\n- Use your access token with bearer authentication in the headers.\nFor example: `Authorization: Bearer fakeaccesstoken`\n- Send all requests over [HTTPS](https://en.wikipedia.org/wiki/HTTPS)\n"
      }
    },
    "schemas": {
      "SavedBlockId": {
        "type": "string",
        "pattern": "^[a-zA-Z0-9_-]{30}$",
        "title": "SavedBlockId",
        "example": "uCHq6B6_S1EqZ2pyam8YVfUldvoF-Q"
      },
      "SplashSettings": {
        "type": "object",
        "description": "Configures settings for the splash block. Only relevant if you want to customise your splash block. Including this field when the block is not an Splash block is invalid and will result in an error.",
        "oneOf": [
          {
            "title": "Background image",
            "properties": {
              "imageUrl": {
                "type": "string",
                "description": "URL of the background image. Ensure the image is publicly available to the Internet."
              }
            },
            "required": [
              "imageUrl"
            ],
            "additionalProperties": false
          },
          {
            "title": "Background video",
            "properties": {
              "videoUrl": {
                "type": "string",
                "description": "URL of the background video. We currently only support YouTube videos. Ensure the video is publicly available to the Internet."
              }
            },
            "required": [
              "videoUrl"
            ],
            "additionalProperties": false
          }
        ],
        "example": {
          "imageUrl": "https://images.unsplash.com/photo-1530281700549-e82e7bf110d6"
        }
      },
      "PostAcceptance": {
        "type": "object",
        "description": "Configures a post-acceptance redirect for the page; accepters will be redirected upon accepting the page. If not provided, it will not be enabled.",
        "properties": {
          "enabled": {
            "description": "Whether or not the post-acceptance action is enabled for the page. Default is `true`.",
            "type": "boolean",
            "default": true
          },
          "url": {
            "description": "The URL that the accepter will be redirected to upon acceptance. The URL must have a protocol specified and it must be one of `http`, `https`, or no protocol specified and will be defaulted to `https`. Other protocols will be rejected with an error on page creation.",
            "type": "string"
          },
          "continueLabel": {
            "description": "The label that will be used on the button to perform the post-acceptance action. Default is `Continue`.",
            "default": "Continue",
            "type": "string",
            "maxLength": 140
          }
        },
        "required": [
          "url"
        ]
      },
      "AcceptBlockSettings": {
        "type": "object",
        "description": "Configures settings for the accept block. Only relevant if you want to customise your accept block. Including this field when the block is not an Accept block is invalid and will result in an error.",
        "properties": {
          "postAcceptance": {
            "$ref": "#/components/schemas/PostAcceptance"
          }
        }
      },
      "Currency": {
        "type": "string",
        "enum": [
          "USD",
          "EUR",
          "JPY",
          "GBP",
          "AUD",
          "CHF",
          "CAD",
          "MXN",
          "CNY",
          "NZD",
          "SEK",
          "RUB",
          "AFN",
          "ALL",
          "DZD",
          "AOA",
          "ANG",
          "ARS",
          "AMD",
          "AZN",
          "BHD",
          "BDT",
          "BYR",
          "BZD",
          "BOB",
          "BAM",
          "BWP",
          "BRL",
          "BND",
          "BGN",
          "BIF",
          "KHR",
          "CVE",
          "XAF",
          "CLP",
          "COP",
          "KMF",
          "CRC",
          "HRK",
          "CZK",
          "DJF",
          "DOP",
          "CDF",
          "EGP",
          "ERN",
          "ETB",
          "GEL",
          "GHS",
          "DKK",
          "GTQ",
          "GNF",
          "HNL",
          "HKD",
          "HUF",
          "ISK",
          "INR",
          "IDR",
          "IRR",
          "IQD",
          "ILS",
          "JMD",
          "JOD",
          "KZT",
          "KES",
          "KWD",
          "LBP",
          "LYD",
          "MOP",
          "MKD",
          "MGA",
          "MYR",
          "MUR",
          "MDL",
          "MAD",
          "MZN",
          "MMK",
          "NAD",
          "NPR",
          "NIO",
          "XOF",
          "NGN",
          "NOK",
          "OMR",
          "PKR",
          "PAB",
          "PGK",
          "PYG",
          "PEN",
          "PHP",
          "PLN",
          "QAR",
          "RON",
          "RWF",
          "SAR",
          "RSD",
          "SGD",
          "SOS",
          "ZAR",
          "KRW",
          "LKR",
          "SDG",
          "SYP",
          "TWD",
          "TZS",
          "THB",
          "TOP",
          "TTD",
          "TND",
          "TRY",
          "UGX",
          "UAH",
          "AED",
          "UYU",
          "UZS",
          "VEF",
          "VND",
          "YER"
        ],
        "example": "USD"
      },
      "Discount": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "fixed",
              "percentage"
            ]
          },
          "amount": {
            "type": "number",
            "minimum": 0
          }
        },
        "required": [
          "type",
          "amount"
        ],
        "additionalProperties": false
      },
      "QuoteSettings": {
        "type": "object",
        "description": "Settings for the quote block. Only relevant if you want to customise your quote block. Ignore this field for non Quote block types.",
        "properties": {
          "selectionType": {
            "type": "string",
            "description": "The [selection type/mode](/docs/guides/quote-data-lifecycle#quote-block-fundamentals) of the quote. Default is `combined`.",
            "enum": [
              "single",
              "multi",
              "combined"
            ],
            "default": "combined"
          },
          "selectionRequired": {
            "type": "boolean",
            "description": "If quote selection is enabled, this specifies if a selection must be made. Default is `false`.",
            "default": false
          },
          "currency": {
            "description": "Currency for the quote block. If not specified then the currency of the saved quote block will be retained.",
            "$ref": "#/components/schemas/Currency"
          },
          "showTotalDiscount": {
            "type": "boolean",
            "description": "Whether the total discount is shown. Default is `false`.",
            "default": false
          },
          "showTaxTotals": {
            "type": "boolean",
            "description": "Whether the total tax is shown. Default is `false`.",
            "default": false
          },
          "showTotalExcludingTax": {
            "type": "boolean",
            "description": "Whether the total amount excluding tax is shown. Default is `false`.",
            "default": false
          },
          "quoteDiscount": {
            "description": "The discount to apply to the total quote price.",
            "$ref": "#/components/schemas/Discount"
          }
        },
        "additionalProperties": false
      },
      "Text": {
        "type": "string",
        "maxLength": 30000
      },
      "FeaturesList": {
        "type": "array",
        "description": "For plan cards, the features that will be listed below the plan card.",
        "items": {
          "type": "string"
        },
        "maxItems": 100
      },
      "Metadata": {
        "type": "object",
        "description": "Data you provide, that will be returned as part of all Webhooks.",
        "maxProperties": 500,
        "additionalProperties": {
          "maxLength": 500,
          "type": "string"
        }
      },
      "FixedCostLineItem": {
        "title": "Fixed cost line item",
        "type": "object",
        "description": "A fixed cost line item, with a description and pricing information",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of line item",
            "enum": [
              "fixedCost"
            ]
          },
          "description": {
            "description": "The text description of the line item",
            "$ref": "#/components/schemas/Text"
          },
          "unitPrice": {
            "type": "number",
            "description": "The per unit price of the line item"
          },
          "unitLabel": {
            "type": "string",
            "description": "The per unit label of the line item",
            "maxLength": 200
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of the line item",
            "minimum": 0
          },
          "quantityRange": {
            "type": "object",
            "description": "A range your client can choose the quantity from (when you don't want to provide a fixed quantity). This field is optional",
            "properties": {
              "min": {
                "type": "number"
              },
              "max": {
                "type": "number"
              }
            },
            "required": [
              "min",
              "max"
            ]
          },
          "taxExempt": {
            "type": "boolean",
            "description": "Whether the line item is exempt from tax. Default is `false`."
          },
          "optional": {
            "type": "boolean",
            "description": "Whether the line item is optional. Default is `false`."
          },
          "selected": {
            "type": "boolean",
            "description": "Whether an optional line item is selected by default. Default is `false`."
          },
          "lineItemDiscount": {
            "description": "The discount to apply to the total line item price.",
            "$ref": "#/components/schemas/Discount"
          },
          "billingSchedule": {
            "type": "string",
            "description": "Set the billing frequency, whether it's a one-off or recurring. Default is `one-off`.",
            "enum": [
              "one-off",
              "weekly",
              "monthly",
              "quarterly",
              "yearly"
            ]
          },
          "recommended": {
            "type": "boolean",
            "description": "For plan cards, whether it is highlighted as recommended. Default is `false`."
          },
          "featuresList": {
            "description": "For plan cards, the features that will be listed below the plan card.",
            "$ref": "#/components/schemas/FeaturesList"
          },
          "metadata": {
            "description": "Customer's metadata sent along with the request",
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "type",
          "description"
        ],
        "additionalProperties": false
      },
      "TextLineItem": {
        "title": "Text line item",
        "type": "object",
        "description": "A text line item, with a description",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of line item",
            "enum": [
              "text"
            ]
          },
          "description": {
            "description": "The text description of the line item",
            "$ref": "#/components/schemas/Text"
          },
          "metadata": {
            "description": "Customer's metadata sent along with the request",
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "type",
          "description"
        ],
        "additionalProperties": false
      },
      "QuoteSection": {
        "type": "object",
        "description": "A Quote section containing a group of line items or plan cards.",
        "properties": {
          "displayMode": {
            "type": "string",
            "description": "Display the quote section as a [table](https://help.qwilr.com/article/741-creating-tables-in-the-quote-block) or [plans](https://help.qwilr.com/article/740-creating-pricing-cards-in-the-quote-block). Default is `table`.",
            "enum": [
              "table",
              "plans"
            ],
            "default": "table"
          },
          "itemSingleSelect": {
            "type": "boolean",
            "description": "Whether only one line item or plan card in this section can be selected at a time. Default is `false` for tables, `true` for plans."
          },
          "description": {
            "description": "The text description of the section.",
            "$ref": "#/components/schemas/Text"
          },
          "lineItems": {
            "type": "array",
            "description": "An array of line items (or plan cards) for the section.",
            "maxItems": 1000,
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FixedCostLineItem"
                },
                {
                  "$ref": "#/components/schemas/TextLineItem"
                }
              ]
            }
          },
          "settings": {
            "type": "object",
            "properties": {
              "showSubtotal": {
                "type": "boolean",
                "default": true,
                "description": "Whether the subtotal amount is shown or not. Default is `true`."
              },
              "showUnitPrice": {
                "type": "boolean",
                "default": true,
                "description": "Whether or not to show the unit price column. Default is `true`."
              },
              "showQuantity": {
                "type": "boolean",
                "default": true,
                "description": "Whether or not to show the quantity column. Default is `true`."
              },
              "showCost": {
                "type": "boolean",
                "default": true,
                "description": "Whether or not to show the cost column. Default is `true`."
              },
              "selected": {
                "type": "boolean",
                "default": false,
                "description": "Whether the quote section is pre-selected. Only relevant when the quote's selectionType is 'multi' or 'single'. Default is `false`."
              },
              "selectionRequired": {
                "type": "boolean",
                "default": false,
                "description": "Whether this quote section must be selected. Only relevant when the quote's selectionType is 'multi' or 'single'\". Default is `false`."
              },
              "sectionDiscount": {
                "description": "The discount to apply to the total section price.",
                "$ref": "#/components/schemas/Discount"
              },
              "showFeatures": {
                "type": "boolean",
                "default": true,
                "description": "Whether the feature lists are shown below each plan card. Default is `true`."
              },
              "groupItemsByBillingSchedule": {
                "type": "boolean",
                "default": false,
                "description": "Whether the plan cards are grouped by billing frequency. Default is `false`."
              }
            }
          },
          "metadata": {
            "description": "Customer's metadata sent along with the request",
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "additionalProperties": false
      },
      "TextTokenSubstitutions": {
        "title": "Text Token Substitutions",
        "type": "string",
        "description": "A text substitution. Replaces the token with a plain text value."
      },
      "RepeatingTokenSubstitutions": {
        "title": "Repeating Token Substitutions",
        "type": "array",
        "description": "A repeating token substitution. Content is repeated for each entry in the array.",
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "BlockSubstitutions": {
        "type": "object",
        "description": "Mapping of token API reference keys to substitution values used inside a block.",
        "example": {
          "block_token_key": "Example value",
          "repeating_token_key": [
            {
              "item_property": "value1"
            },
            {
              "item_property": "value2"
            }
          ]
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/TextTokenSubstitutions"
            },
            {
              "$ref": "#/components/schemas/RepeatingTokenSubstitutions"
            }
          ]
        }
      },
      "ObjectId": {
        "type": "string",
        "pattern": "^[a-z0-9]{24}$",
        "title": "Id",
        "example": "6ee0f841f3cc8900090d82dc"
      },
      "AcceptTemplateSettings": {
        "type": "object",
        "description": "Configures settings for the accept block in the template being used. Only relevant if you have an accept block. Setting this without an accept block in the template will result in an error.",
        "properties": {
          "postAcceptance": {
            "$ref": "#/components/schemas/PostAcceptance"
          }
        }
      },
      "PageSubstitutions": {
        "type": "object",
        "description": "Mapping of token API reference keys to substitution values used throughout the page. The values can be overwritten if the same keys are defined in the block-level substitutions.",
        "example": {
          "page_token_key": "Example value",
          "repeating_token_key": [
            {
              "item_property": "value1"
            },
            {
              "item_property": "value2"
            }
          ]
        },
        "additionalProperties": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/TextTokenSubstitutions"
            },
            {
              "$ref": "#/components/schemas/RepeatingTokenSubstitutions"
            }
          ]
        }
      },
      "Acceptance": {
        "type": "object",
        "nullable": true,
        "properties": {
          "acceptersTotal": {
            "type": "integer"
          },
          "acceptersCount": {
            "type": "integer"
          },
          "accepters": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "legalEntity": {
                  "type": "string"
                },
                "esigned": {
                  "type": "boolean"
                },
                "acceptedAt": {
                  "type": "string"
                },
                "customForm": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "type": "object",
                    "properties": {
                      "field": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "postAcceptance": {
                  "description": "Post-acceptance details for the accepter. Null if post-acceptance not enabled for accepter.",
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "url": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "url"
                  ]
                }
              },
              "required": [
                "name",
                "email",
                "legalEntity",
                "esigned",
                "acceptedAt"
              ]
            }
          },
          "auditTrailPdf": {
            "type": "string",
            "description": "URL for the audit trail PDF download. Please note that it might take a few minutes for the PDF to be available after the Qwilr page is accepted."
          },
          "quote": {
            "type": "object",
            "nullable": true,
            "properties": {
              "amount": {
                "type": "number"
              },
              "amountExcludingTax": {
                "type": "number"
              },
              "quoteSections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "selected": {
                      "type": "boolean"
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true
                    },
                    "lineItems": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "title": "Text line item",
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "text"
                                ]
                              },
                              "metadata": {
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "title": "Fixed cost line item",
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "fixedCost"
                                ]
                              },
                              "unitPrice": {
                                "type": "number"
                              },
                              "quantity": {
                                "type": "number"
                              },
                              "billingSchedule": {
                                "type": "string",
                                "enum": [
                                  "one-off",
                                  "weekly",
                                  "monthly",
                                  "quarterly",
                                  "yearly"
                                ]
                              },
                              "selected": {
                                "type": "boolean"
                              },
                              "metadata": {
                                "type": "object",
                                "nullable": true
                              }
                            },
                            "required": [
                              "type",
                              "unitPrice",
                              "quantity",
                              "selected"
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "selected",
                    "lineItems"
                  ]
                }
              }
            },
            "required": [
              "amount",
              "amountExcludingTax",
              "quoteSections"
            ]
          }
        },
        "required": [
          "acceptersTotal",
          "acceptersCount",
          "accepters"
        ],
        "additionalProperties": false
      },
      "Page": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "name": {
            "type": "string",
            "example": "Page Name"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "live",
              "accepting",
              "accepted",
              "disabled",
              "declined"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "nullable": true
          },
          "links": {
            "type": "object",
            "properties": {
              "collaboratorUrl": {
                "type": "string"
              },
              "editorUrl": {
                "type": "string"
              },
              "publicUrl": {
                "type": "string"
              },
              "pdfUrl": {
                "type": "string"
              }
            },
            "required": [
              "collaboratorUrl",
              "editorUrl",
              "publicUrl",
              "pdfUrl"
            ]
          },
          "acceptance": {
            "$ref": "#/components/schemas/Acceptance"
          },
          "previewAcceptance": {
            "$ref": "#/components/schemas/Acceptance"
          },
          "ownerId": {
            "$ref": "#/components/schemas/ObjectId"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "tags",
          "links",
          "ownerId"
        ],
        "additionalProperties": false
      },
      "Error": {
        "description": "Response error",
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "SavedBlock": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Saved block name"
          }
        },
        "additionalProperties": false
      },
      "EventType": {
        "type": "string",
        "enum": [
          "pageAccepted",
          "pagePreviewAccepted",
          "pageViewed",
          "pageFirstViewed"
        ],
        "example": "pageAccepted"
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/EventType"
          },
          "url": {
            "type": "string"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Request has malformed data or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized access to a resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "No permission to access a resource",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Entity has not passed validation",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}